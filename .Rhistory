gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=1)
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(2.5) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f2"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=1)
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=1)
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(5) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f1"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=1)
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=1)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(5) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f1"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=20)
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=3)
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(4) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(4) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
###########
# Run one #
###########
scenario <- "f1"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=3)
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(3) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f1"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=3)
scenario <- "f3"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=3)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(4) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f3"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=3)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
#source("CI.R")
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(4) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
###########
# Run one #
###########
scenario <- "f3"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=20)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
simulate<- function(scenario, true_cp, num_node=50, num_layer=4, num_seq=20) {
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
hat.rank <- c(15, 15, num_layer)
threshold_list <- rev(c(4) * num_node*sqrt(num_layer)*(log(num_T))^(3/2))
intervals <- construct_intervals(num_T, sqrt(1/2), 4)
output_holder_g <- array(NA, dim = c(num_seq, length(threshold_list), 4))
output_holder_gl1 <- array(NA, dim = c(num_seq, length(threshold_list), 4))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
gains <- cusum_on_intervals(CUSUM_step1, A.tensor, verbose = FALSE, intervals, obj.B = A.tensor)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor, num_T, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_list, method = "Greedy", obj.B = A.tensor)
for (i in 1:(length(results_g)-1)) {
detected_CP_g <- sort(results_g[[i+1]]$results[, 1])
detected_CP_gl1 <- refinement1(detected_CP_g, A.tensor, A.tensor, hat.rank)
output_holder_g[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_g, num_T))
output_holder_gl1[seq_iter, i, ] <- as.numeric(eval_CP(true_CP, detected_CP_gl1, num_T))
cat("Threshold: ", threshold_list[i], "\n")
cat("\tDetected Greedy CP  :", detected_CP_g, "Metrics: ", output_holder_g[seq_iter, i, ], "\n")
cat("\tRefinement Greedy   :", detected_CP_gl1, "Metrics: ", output_holder_gl1[seq_iter, i, ], "\n")
}
}
results <- list(
greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f1"
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
}
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=3)
results <- simulate(scenario, true_CP, num_node=100, num_layer=4, num_seq=20)
colMeans(results[[2]])
results <- simulate(scenario, true_CP, num_node=50, num_layer=4, num_seq=20)
colMeans(results[[2]])
results <- simulate(scenario, true_CP, num_node=50, num_layer=8, num_seq=20)
results <- simulate(scenario, true_CP, num_node=50, num_layer=2, num_seq=20)
setwd("~/Documents/GitHub/GraphFL")
library(reticulate)
library(GNAR)
library(Matrix)
library(nett)
install.packages("blockmodels")
library(blockmodels)
# Assume A is an adjacency matrix
res <- BM_bernoulli("SBM", one_adj, verbosity = 0)
# load data
np <- import("numpy")
TS_data <- np$load("data/data_s1_n120.npz")
num_node <- "120" # "120", "144"
scenario <- "s1"  # "s1", "s2"
#TS_data$files
data <- TS_data$f["y"]  # seq by N by T
label <- TS_data$f["labels"] # seq by N
adj <- TS_data$f["adj_matrices"] # seq by N by N
output_label <- array(NA, dim = dim(label)) # saved output labels
seq_iter <- 1
K_range <- 2:5
for(seq_iter in 1:T_seq){
one_adj <- Matrix(adj[seq_iter,,])
BIC_by_k <- numeric(length(K_range))
for(i in 1:length(K_range)){
pred_label <- fast_cpl(one_adj, K=K_range[i], ilabels = NULL, niter = 10)
BIC_by_k <- eval_dcsbm_bic(one_adj, z=pred_label, K=K_range[i], poi=T)
}
# Fit GNAR model (e.g., GNAR(1, [1]))
fit <- GNARfit(vts = one_data, net = one_adj, alphaOrder = 2, betaOrder = c(1,1))
summary(fit)
#output_label[seq_iter,] <- result[[which.max(result_Sil)]]@cluster
}
